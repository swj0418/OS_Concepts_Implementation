package racecondition;
import java.util.*;

public class RaceCondition implements Runnable {
	int JobID;
	private Thread t;
	static int counter = 5;
	
	public RaceCondition() {
		
	}
	
	public RaceCondition(int JobID) {
		this.JobID = JobID;
	}
	
	public void run() {
		System.out.println("Job " + JobID);
		for(double i = 0; i < 20000000; i++) {
			
		}
		for(int i = 0; i < 100; i++) {
			if(JobID == 1) {
				counter++;
				System.out.println(counter);
			} else if(JobID == 2) {
				counter--;
				System.out.println(counter);
			}
		}
	}
	
	public void run(int counter, int JobID) {
		if(JobID == 1) {
			counter++;
		} else if(JobID == 2) {
			counter--;
		}
	}
	/*
	public void start() {
		System.out.println("Starting Job " + JobID);
		if(t == null) {
			t = new Thread();
			t.run();
		}
	} // I think I don't need this if I am running the static main method inside this very class
	*/
	public void incre(int counter) {
		counter++;
	}
	public void decre(int counter) {
		counter--;
	}
	
	public static void main(String[] ar) throws InterruptedException {
		//int counter = 5;
		
		RaceCondition R1 = new RaceCondition(1);
		RaceCondition R2 = new RaceCondition(2);
		
		/*
		R1.run();
		System.out.println(counter);
		R2.run();
		System.out.println(counter);
		
		System.out.println("============== COMPLETE ==============");
		System.out.println(counter);
		*/
		
		Thread t1 = new Thread(R1);
		Thread t2 = new Thread(R2);
		
		t1.start(); t2.start();
	}
}
